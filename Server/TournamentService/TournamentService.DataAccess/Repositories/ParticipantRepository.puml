@startuml
interface IParticipantRepository {
    GetByIdAsync(id:string) : Task<Participant>
    GetAsync(tournamentId:string, page:int, pageSize:int) : Task<List<Participant>>
    + GetAllAsync(tournamentId:string) : Task<List<Participant>>
    AddAsync(participant:Participant) : Task<Participant>
    DeleteAsync(participant:Participant) : Task<Participant>
    UpdateAsync(participant:Participant) : Task<Participant>
    + AddParticipantToTournament(tournamentId:string, participantId:string) : Task<Participant>
    + RemoveParticipantFromTournament(tournamentId:string, participantId:string) : Task<Participant>
}
class ParticipantRepository {
    - <<readonly>> _context : TournamentContext
    + ParticipantRepository(context:TournamentContext)
    + <<async>> AddAsync(participant:Participant) : Task<Participant>
    + <<async>> AddParticipantToTournament(tournamentId:string, participantId:string) : Task<Participant>
    + <<async>> DeleteAsync(participant:Participant) : Task<Participant>
    + <<async>> GetAsync(tournamentId:string, page:int, pageSize:int) : Task<List<Participant>>
    + <<async>> GetAllAsync(tournamentId:string) : Task<List<Participant>>
    + <<async>> GetByIdAsync(id:string) : Task<Participant>
    + <<async>> RemoveParticipantFromTournament(tournamentId:string, participantId:string) : Task<Participant>
    + <<async>> UpdateAsync(participant:Participant) : Task<Participant>
}
IParticipantRepository <|-- ParticipantRepository
@enduml
