@startuml
class RoundRobinBracket {
    - <<readonly>> _matchService : IMatchService
    - <<readonly>> _tournamentRepository : ITournamentRepository
    - <<readonly>> _participantService : IParticipantService
    + RoundRobinBracket(matchService:IMatchService, \ntournamentService:ITournamentRepository, participantService:IParticipantService)
    + <<async>> GenerateBracket(tournamentId:string) : Task
    + <<async>> HandleMatchResult(matchId:string, winnerId:string, winPoints:int, loosePoints:int) : Task
    - CreateMatch(tournamentId:string, round:int, number:int, \nparticipant1Id:string, participant2Id:string, ownerId:string, categoryId:string) : MatchDto
}
class DoubleEliminationBracket {
    - <<readonly>> _matchService : IMatchService
    + DoubleEliminationBracket(matchService:IMatchService)
    + <<async>> GenerateBracket(tournamentId:string, participants:List<string>) : Task
    + <<async>> HandleMatchResult(matchId:string, winnerId:string, loserId:string) : Task
    - <<async>> AdvanceInWinners(match:MatchDto, winnerId:string) : Task
    - <<async>> DropToLosers(match:MatchDto, loserId:string) : Task
    - <<async>> AdvanceInLosers(match:MatchDto, winnerId:string) : Task
}
class SingleEliminationBracket {
    - <<readonly>> _matchService : IMatchService
    - <<readonly>> _tournamentRepository : ITournamentRepository
    - <<readonly>> _participantService : IParticipantService
    + SingleEliminationBracket(matchService:IMatchService, \ntournamentService:ITournamentRepository, participantService:IParticipantService)
    + <<async>> GenerateBracket(tournamentId:string) : Task
    + <<async>> HandleMatchResult(matchId:string, winnerId:string, \nlooserId:string, winPoints:int, loosePoints:int) : Task
    - CreateMatch(tournamentId:string, round:string, number:int, \nparticipant1Id:string, participant2Id:string, ownerId:string, categoryId:string) : MatchDto
}
class SwissBracket {
    - <<readonly>> _matchService : IMatchService
    - <<readonly>> _tournamentRepository : ITournamentRepository
    - <<readonly>> _participantService : IParticipantService
    + SwissBracket(matchService:IMatchService, \ntournamentService:ITournamentRepository, participantService:IParticipantService)
    + <<async>> GenerateSwissMatches(tournamentId:string) : Task
    + <<async>> HandleMatchResult(matchId:string, \nwinnerId:string, loserId:string, winScore:int, looseScore:int) : Task
    - CreateMatch(tournamentId:string, round:int, number:int, \nparticipant1Id:string, participant2Id:string, ownerId:string, categoryId:string) : MatchDto
}
@enduml
